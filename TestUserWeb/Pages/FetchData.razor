@page "/fetchdata"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using TestCrudWeb.DTOs;
@using TestCrudWeb.Data
@using TestCrudWeb.SO;
@using TestCrudWeb.Services;
@inject WeatherForecastService ForecastService
@inject IUserService _userService
@inject ISessionslStorage _sessionStorage
@inject ProtectedSessionStorage _sessionStorage
@inject NavigationManager uriHelper;

<PageTitle>Lista de usuarios</PageTitle>

@if (listUsuarios.Count() == 0 )
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">
                    <label class="form-label" for="Apellido">Apellido:</label>
                    <input required class="form-control" type="text" id="Apellido" @bind-value="usuarioEdit.Apellido">
                </div>
                <div class="form-group">
                    <label class="form-label" for="Nombre">Nombre:</label>
                    <input required class="form-control" type="text" id="Nombre" @bind-value="usuarioEdit.Nombre">
                </div>
                <div class="form-group">
                    <label class="form-label" for="Email">Email:</label>
                    <input required class="form-control" type="text" id="Email" @bind-value="usuarioEdit.Email">
                </div>
                <div class="form-group">
                    <label class="form-label" for="FechaNacimiento">Fecha nacimiento:</label>
                    <input required class="form-control" type="date" id="FechaNacimiento" @bind-value="usuarioEdit.FechaNacimiento">
                </div>
                <div class="form-group">
                    <label class="form-label" for="Password">Password:</label>
                    <input class="form-control" type="password" id="Password" @bind-value="usuarioEdit.Password">
                </div>
                <div class="form-group">
                    <label class="form-label" for="IdTipoUsuario">Tipo usuario:</label>
                    <select id="IdTipoUsuario" @bind="usuarioEdit.IdTipoUsuario">
                        <option value="1">Administrador</option>
                        <option value="2">Visitante</option>
                    </select>
                </div>
                
                @if (usuarioEdit.IdUsuario != 0)
                {
                    <button type="submit" class="btn btn-primary" @onclick="SetUpdate">Aceptar</button>
                    <button type="button" class="btn btn-secondary" @onclick="volver">Cancelar</button>
                }
                else
                {
                    <button type="submit" class="btn btn-primary" @onclick="SaveUser">Aceptar</button>
                }
            </form>

        </div>
        <div class="col-md-8">
            <h1>Lista de usuarios</h1>


            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Apellido</th>
                        <th>Nombre</th>
                        <th>Email</th>
                        <th>Fecha de nacimiento</th>
                        <th>Tipo</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in listUsuarios)
                    {
                        <tr>
                            <td>@usuario.IdUsuario</td>
                            <td>@usuario.Apellido</td>
                            <td>@usuario.Nombre</td>
                            <td>@usuario.Email</td>
                            <td>@usuario.FechaNacimiento</td>
                            <td>@usuario.TipoUsuario</td>
                            <td> <button type="button" @onclick="()=>Edit(usuario.IdUsuario)">Editar</button></td>
                            <td> <button type="button" @onclick="()=>Delete(usuario.IdUsuario)">Borrar</button></td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
}


@code {

    private WeatherForecast[]? forecasts;
    private List<UsuariosDTO> listUsuarios = new List<UsuariosDTO>();
    private UsuariosDTO usuarioEdit = new UsuariosDTO();
    protected bool isLogin = false;
    protected string rol = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ProtectedBrowserStorageResult<bool> loged = await _sessionStorage.GetAsync<bool>("isLogin");
            ProtectedBrowserStorageResult<string> role = await _sessionStorage.GetAsync<string>("Rol");
            if (loged.Success && loged.Value)
            {
                isLogin = loged.Value; 
                rol = role.Value;
                if (rol != "Administrador")
                {
                    uriHelper.NavigateTo("/");
                }
                StateHasChanged();
            }else
            {
                uriHelper.NavigateTo("/");
            }            
        }
    }
    
    protected override async Task OnInitializedAsync()
    {        
        listUsuarios = await _userService.GetAll();        
    }

    private async Task Edit(int id)
    {
        usuarioEdit = await _userService.GetByID(id);
    }
    private async Task SetUpdate()
    {
        if (!string.IsNullOrEmpty(usuarioEdit.Email) &&
            !string.IsNullOrEmpty(usuarioEdit.Nombre) &&
            !string.IsNullOrEmpty(usuarioEdit.Apellido))
        {
            usuarioEdit.TipoUsuario = "";
            usuarioEdit = await _userService.Update(usuarioEdit);
            listUsuarios = await _userService.GetAll();
            usuarioEdit = new UsuariosDTO();
            StateHasChanged();
        }
        
    }

    private async Task volver()
    {
        usuarioEdit = new UsuariosDTO();
        StateHasChanged();
    }
    private async Task SaveUser()
    {
        if (!string.IsNullOrEmpty(usuarioEdit.Email) &&
           !string.IsNullOrEmpty(usuarioEdit.Nombre) &&
           !string.IsNullOrEmpty(usuarioEdit.Apellido) &&
           usuarioEdit.IdTipoUsuario != 0)
        {
            usuarioEdit.TipoUsuario = "";
            usuarioEdit = await _userService.Create(usuarioEdit);            
            usuarioEdit = new UsuariosDTO();
            listUsuarios = await _userService.GetAll();
            StateHasChanged();
        }
    }
    private async Task Delete(int id)
    {
        await _userService.Delete(id);
        usuarioEdit = new UsuariosDTO();
        listUsuarios = await _userService.GetAll();
        StateHasChanged();
    }
}
